MODULE NAME
    katello.client.api.subnet


CLASSES

    class SubnetAPI(katello.client.api.base.KatelloAPI)


        get(self, subnet_id)
            Get a subnet

            :type  subnet_id: string :param subnet_id: <p>Subnet numeric
            identifier</p>

        list(self, queries=None)
            List subnets

            :type  data['search']: string :param data['search']: <p>Filter
            results</p>

            :type  data['order']: string :param data['order']: <p>Sort
            results</p>

        create(self, data)
            Create a subnet

            :type  data['name']: string :param data['name']: <p>Subnet
            name</p>

            :type  data['network']: string :param data['network']:
            <p>Subnet network</p>

            :type  data['mask']: string :param data['mask']: <p>Netmask for
            this subnet</p>

            :type  data['gateway']: string :param data['gateway']:
            <p>Primary DNS for this subnet</p>

            :type  data['dns_primary']: string :param data['dns_primary']:
            <p>Primary DNS for this subnet</p>

            :type  data['dns_secondary']: string :param
            data['dns_secondary']: <p>Secondary DNS for this subnet</p>

            :type  data['from']: string :param data['from']: <p>Starting IP
            Address for IP auto suggestion</p>

            :type  data['to']: string :param data['to']: <p>Ending IP
            Address for IP auto suggestion</p>

            :type  data['vlanid']: string :param data['vlanid']: <p>VLAN ID
            for this subnet</p>

            :type  data['domain_ids']: string :param data['domain_ids']:
            <p>Domains in which this subnet is part</p>

            :type  data['dhcp_id']: string :param data['dhcp_id']: <p>DHCP
            Proxy to use within this subnet</p>

            :type  data['tftp_id']: string :param data['tftp_id']: <p>TFTP
            Proxy to use within this subnet</p>

            :type  data['dns_id']: string :param data['dns_id']: <p>DNS
            Proxy to use within this subnet</p>

        update(self, subnet_id, data)
            Update a subnet

            :type  subnet_id: string :param subnet_id: <p>Subnet numeric
            identifier</p>

            :type  data['name']: string :param data['name']: <p>Subnet
            name</p>

            :type  data['network']: string :param data['network']:
            <p>Subnet network</p>

            :type  data['mask']: string :param data['mask']: <p>Netmask for
            this subnet</p>

            :type  data['gateway']: string :param data['gateway']:
            <p>Primary DNS for this subnet</p>

            :type  data['dns_primary']: string :param data['dns_primary']:
            <p>Primary DNS for this subnet</p>

            :type  data['dns_secondary']: string :param
            data['dns_secondary']: <p>Secondary DNS for this subnet</p>

            :type  data['from']: string :param data['from']: <p>Starting IP
            Address for IP auto suggestion</p>

            :type  data['to']: string :param data['to']: <p>Ending IP
            Address for IP auto suggestion</p>

            :type  data['vlanid']: string :param data['vlanid']: <p>VLAN ID
            for this subnet</p>

            :type  data['domain_ids']: string :param data['domain_ids']:
            <p>Domains in which this subnet is part</p>

            :type  data['dhcp_id']: string :param data['dhcp_id']: <p>DHCP
            Proxy to use within this subnet</p>

            :type  data['tftp_id']: string :param data['tftp_id']: <p>TFTP
            Proxy to use within this subnet</p>

            :type  data['dns_id']: string :param data['dns_id']: <p>DNS
            Proxy to use within this subnet</p>

        destroy(self, subnet_id)
            Destroy a subnet

            :type  subnet_id: string :param subnet_id: <p>Subnet numeric
            identifier</p>
